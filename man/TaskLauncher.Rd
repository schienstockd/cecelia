% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/taskLauncher.R
\name{TaskLauncher}
\alias{TaskLauncher}
\title{Task Launcher will return a TaksProcess object for execution}
\description{
Very naive task processing framework. This should be replaced with:
https://github.com/mschubert/clustermq
}
\examples{
TODO
}
\section{Super class}{
\code{\link[cecelia:TaskCore]{cecelia::TaskCore}} -> \code{TaskLauncher}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TaskLauncher-new}{\code{TaskLauncher$new()}}
\item \href{#method-TaskLauncher-initTask}{\code{TaskLauncher$initTask()}}
\item \href{#method-TaskLauncher-taskInputFile}{\code{TaskLauncher$taskInputFile()}}
\item \href{#method-TaskLauncher-taskOutputFile}{\code{TaskLauncher$taskOutputFile()}}
\item \href{#method-TaskLauncher-clearTaskLogFile}{\code{TaskLauncher$clearTaskLogFile()}}
\item \href{#method-TaskLauncher-taskLogFile}{\code{TaskLauncher$taskLogFile()}}
\item \href{#method-TaskLauncher-prepRun}{\code{TaskLauncher$prepRun()}}
\item \href{#method-TaskLauncher-run}{\code{TaskLauncher$run()}}
\item \href{#method-TaskLauncher-kill}{\code{TaskLauncher$kill()}}
\item \href{#method-TaskLauncher-result}{\code{TaskLauncher$result()}}
\item \href{#method-TaskLauncher-taskLog}{\code{TaskLauncher$taskLog()}}
\item \href{#method-TaskLauncher-setHPCConf}{\code{TaskLauncher$setHPCConf()}}
\item \href{#method-TaskLauncher-setSubHPCJobs}{\code{TaskLauncher$setSubHPCJobs()}}
\item \href{#method-TaskLauncher-getHPCConf}{\code{TaskLauncher$getHPCConf()}}
\item \href{#method-TaskLauncher-getSubHPCJobs}{\code{TaskLauncher$getSubHPCJobs()}}
\item \href{#method-TaskLauncher-getTaskFunction}{\code{TaskLauncher$getTaskFunction()}}
\item \href{#method-TaskLauncher-getTaskID}{\code{TaskLauncher$getTaskID()}}
\item \href{#method-TaskLauncher-clone}{\code{TaskLauncher$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="callingEnv"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-callingEnv'><code>cecelia::TaskCore$callingEnv()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="envParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-envParams'><code>cecelia::TaskCore$envParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="funParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-funParams'><code>cecelia::TaskCore$funParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="globalParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-globalParams'><code>cecelia::TaskCore$globalParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="runTasks"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-runTasks'><code>cecelia::TaskCore$runTasks()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="setFunParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-setFunParams'><code>cecelia::TaskCore$setFunParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="taskEnv"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-taskEnv'><code>cecelia::TaskCore$taskEnv()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="utilsParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-utilsParams'><code>cecelia::TaskCore$utilsParams()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-new"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-new}{}}}
\subsection{Method \code{new()}}{
Run task inplace


Run local task


Prep hpc task


Run HPC task


Add HPC task completion postfix


Wait for HPC job completion


Cancel hpc job; https://stackoverflow.com/a/7547391/13766165


Get job result


Get ssh util


Init
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$new()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uploadSubmissionFiles}}{boolean to upload submission files}

\item{\code{exitOnly}}{boolean to wait for exit only}

\item{\code{filename}}{character for filename}

\item{\code{cmdOnly}}{boolean return command only}

\item{\code{jobsToCancel}}{list of character of jobs to cancel}

\item{\code{readLog}}{boolean to return log content}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-initTask"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-initTask}{}}}
\subsection{Method \code{initTask()}}{
Init task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$initTask(
  taskFunction,
  taskConf = NULL,
  taskConfFile = NULL,
  inplace = FALSE,
  cciaObj = NULL,
  taskID = NULL,
  forceHPCConf = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taskFunction}}{character for task function}

\item{\code{taskConf}}{list of list of character for task config}

\item{\code{taskConfFile}}{character for task config file}

\item{\code{inplace}}{boolean to run inplace}

\item{\code{cciaObj}}{ReactivePersistentObject to use cached data}

\item{\code{taskID}}{integer for task ID}

\item{\code{forceHPCConf}}{boolean to prepare HPC files}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-taskInputFile"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-taskInputFile}{}}}
\subsection{Method \code{taskInputFile()}}{
Get input file for task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$taskInputFile(taskEnv = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taskEnv}}{character for task environment}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-taskOutputFile"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-taskOutputFile}{}}}
\subsection{Method \code{taskOutputFile()}}{
Get output file for task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$taskOutputFile(local = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{local}}{boolean to return local file}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-clearTaskLogFile"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-clearTaskLogFile}{}}}
\subsection{Method \code{clearTaskLogFile()}}{
Clear task log file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$clearTaskLogFile(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{passed to self$taskLogFile}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-taskLogFile"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-taskLogFile}{}}}
\subsection{Method \code{taskLogFile()}}{
Get task log file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$taskLogFile(fullPath = TRUE, local = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fullPath}}{boolean to return full path}

\item{\code{local}}{boolean to return local file}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-prepRun"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-prepRun}{}}}
\subsection{Method \code{prepRun()}}{
Prepare for run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$prepRun(uploadSubmissionFiles = TRUE, remoteAsLocal = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uploadSubmissionFiles}}{boolean to upload submission files}

\item{\code{remoteAsLocal}}{boolean to set remote location as local}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-run"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-run}{}}}
\subsection{Method \code{run()}}{
Run task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$run()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-kill"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-kill}{}}}
\subsection{Method \code{kill()}}{
Kill task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$kill()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-result"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-result}{}}}
\subsection{Method \code{result()}}{
Check whether task has finished
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$result(wait = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait}}{boolean to wait for job exit}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-taskLog"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-taskLog}{}}}
\subsection{Method \code{taskLog()}}{
Return task log
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$taskLog(locationOnly = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{locationOnly}}{character to return location only}

\item{\code{...}}{passed to self$taskLogFile}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-setHPCConf"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-setHPCConf}{}}}
\subsection{Method \code{setHPCConf()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$setHPCConf(key, x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-setSubHPCJobs"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-setSubHPCJobs}{}}}
\subsection{Method \code{setSubHPCJobs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$setSubHPCJobs(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-getHPCConf"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-getHPCConf}{}}}
\subsection{Method \code{getHPCConf()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$getHPCConf(key)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-getSubHPCJobs"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-getSubHPCJobs}{}}}
\subsection{Method \code{getSubHPCJobs()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$getSubHPCJobs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-getTaskFunction"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-getTaskFunction}{}}}
\subsection{Method \code{getTaskFunction()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$getTaskFunction()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-getTaskID"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-getTaskID}{}}}
\subsection{Method \code{getTaskID()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$getTaskID()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskLauncher-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TaskLauncher-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskLauncher$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
