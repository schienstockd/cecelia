% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/taskProcess.R
\name{TaskProcess}
\alias{TaskProcess}
\title{Task Process; every function that is to be called as process has to
inherit this class}
\description{
Base task process class for all module functions
}
\examples{
TODO
}
\section{Super class}{
\code{\link[cecelia:TaskCore]{cecelia::TaskCore}} -> \code{TaskProcess}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TaskProcess-new}{\code{TaskProcess$new()}}
\item \href{#method-TaskProcess-prepRun}{\code{TaskProcess$prepRun()}}
\item \href{#method-TaskProcess-run}{\code{TaskProcess$run()}}
\item \href{#method-TaskProcess-funName}{\code{TaskProcess$funName()}}
\item \href{#method-TaskProcess-sshConnection}{\code{TaskProcess$sshConnection()}}
\item \href{#method-TaskProcess-initCciaObject}{\code{TaskProcess$initCciaObject()}}
\item \href{#method-TaskProcess-cciaTaskObject}{\code{TaskProcess$cciaTaskObject()}}
\item \href{#method-TaskProcess-cciaImageCollection}{\code{TaskProcess$cciaImageCollection()}}
\item \href{#method-TaskProcess-napariViewer}{\code{TaskProcess$napariViewer()}}
\item \href{#method-TaskProcess-initLog}{\code{TaskProcess$initLog()}}
\item \href{#method-TaskProcess-reinitLog}{\code{TaskProcess$reinitLog()}}
\item \href{#method-TaskProcess-exitLog}{\code{TaskProcess$exitLog()}}
\item \href{#method-TaskProcess-writeLog}{\code{TaskProcess$writeLog()}}
\item \href{#method-TaskProcess-funParamNotNull}{\code{TaskProcess$funParamNotNull()}}
\item \href{#method-TaskProcess-funParam}{\code{TaskProcess$funParam()}}
\item \href{#method-TaskProcess-addFunParamToList}{\code{TaskProcess$addFunParamToList()}}
\item \href{#method-TaskProcess-addFunParamsToList}{\code{TaskProcess$addFunParamsToList()}}
\item \href{#method-TaskProcess-classDir}{\code{TaskProcess$classDir()}}
\item \href{#method-TaskProcess-initPy}{\code{TaskProcess$initPy()}}
\item \href{#method-TaskProcess-pyScript}{\code{TaskProcess$pyScript()}}
\item \href{#method-TaskProcess-setTaskLogFile}{\code{TaskProcess$setTaskLogFile()}}
\item \href{#method-TaskProcess-getTaskLogFile}{\code{TaskProcess$getTaskLogFile()}}
\item \href{#method-TaskProcess-useSink}{\code{TaskProcess$useSink()}}
\item \href{#method-TaskProcess-clone}{\code{TaskProcess$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="callingEnv"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-callingEnv'><code>cecelia::TaskCore$callingEnv()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="envParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-envParams'><code>cecelia::TaskCore$envParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="funParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-funParams'><code>cecelia::TaskCore$funParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="globalParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-globalParams'><code>cecelia::TaskCore$globalParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="runTasks"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-runTasks'><code>cecelia::TaskCore$runTasks()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="setFunParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-setFunParams'><code>cecelia::TaskCore$setFunParams()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="taskEnv"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-taskEnv'><code>cecelia::TaskCore$taskEnv()</code></a></span></li>
<li><span class="pkg-link" data-pkg="cecelia" data-topic="TaskCore" data-id="utilsParams"><a href='../../cecelia/html/TaskCore.html#method-TaskCore-utilsParams'><code>cecelia::TaskCore$utilsParams()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-new"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-new}{}}}
\subsection{Method \code{new()}}{
Init
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-prepRun"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-prepRun}{}}}
\subsection{Method \code{prepRun()}}{
Prepare run
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$prepRun(confFile)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{confFile}}{character for path to config file}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-run"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-run}{}}}
\subsection{Method \code{run()}}{
Run task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$run()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-funName"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-funName}{}}}
\subsection{Method \code{funName()}}{
Function name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$funName()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-sshConnection"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-sshConnection}{}}}
\subsection{Method \code{sshConnection()}}{
Init ssh connection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$sshConnection()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-initCciaObject"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-initCciaObject}{}}}
\subsection{Method \code{initCciaObject()}}{
Get ccia object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$initCciaObject(uID, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{uID}}{character for unique ID}

\item{\code{...}}{passed to initCciaObject}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-cciaTaskObject"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-cciaTaskObject}{}}}
\subsection{Method \code{cciaTaskObject()}}{
Get task object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$cciaTaskObject(forceReload = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{forceReload}}{boolean to force reload object from disk}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-cciaImageCollection"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-cciaImageCollection}{}}}
\subsection{Method \code{cciaImageCollection()}}{
Get image collection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$cciaImageCollection()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-napariViewer"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-napariViewer}{}}}
\subsection{Method \code{napariViewer()}}{
Get napari viewer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$napariViewer()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-initLog"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-initLog}{}}}
\subsection{Method \code{initLog()}}{
Init log
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$initLog(useSink = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{useSink}}{boolean to use sink - this does not work}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-reinitLog"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-reinitLog}{}}}
\subsection{Method \code{reinitLog()}}{
Reinit log
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$reinitLog()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-exitLog"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-exitLog}{}}}
\subsection{Method \code{exitLog()}}{
Remove log
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$exitLog()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-writeLog"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-writeLog}{}}}
\subsection{Method \code{writeLog()}}{
Write to log file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$writeLog(msg, printMsg = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg}}{character for logfile}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-funParamNotNull"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-funParamNotNull}{}}}
\subsection{Method \code{funParamNotNull()}}{
Check that the function parameter is not null
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$funParamNotNull(param)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{character for parameter}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-funParam"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-funParam}{}}}
\subsection{Method \code{funParam()}}{
Get parameter
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$funParam(param)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{character for parameter}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-addFunParamToList"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-addFunParamToList}{}}}
\subsection{Method \code{addFunParamToList()}}{
Add function parameter to list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$addFunParamToList(paramList, param)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{paramList}}{list of list of generic}

\item{\code{param}}{character for parameter}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-addFunParamsToList"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-addFunParamsToList}{}}}
\subsection{Method \code{addFunParamsToList()}}{
Add fun params to list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$addFunParamsToList(paramList, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{paramList}}{list of list of generic}

\item{\code{params}}{list of list of generic}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-classDir"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-classDir}{}}}
\subsection{Method \code{classDir()}}{
Get class directory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$classDir()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-initPy"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-initPy}{}}}
\subsection{Method \code{initPy()}}{
Init python environment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$initPy(condaEnv = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{condaEnv}}{character for conda environment}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-pyScript"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-pyScript}{}}}
\subsection{Method \code{pyScript()}}{
Run python script
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$pyScript(scriptFile, paramsList = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{scriptFile}}{character for script file}

\item{\code{paramsList}}{list of list of generic for parameters}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-setTaskLogFile"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-setTaskLogFile}{}}}
\subsection{Method \code{setTaskLogFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$setTaskLogFile(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-getTaskLogFile"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-getTaskLogFile}{}}}
\subsection{Method \code{getTaskLogFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$getTaskLogFile()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-useSink"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-useSink}{}}}
\subsection{Method \code{useSink()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$useSink()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TaskProcess-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TaskProcess-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TaskProcess$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
